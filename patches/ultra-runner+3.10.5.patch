diff --git a/node_modules/ultra-runner/lib/options.js b/node_modules/ultra-runner/lib/options.js
index c2dff06..367e224 100644
--- a/node_modules/ultra-runner/lib/options.js
+++ b/node_modules/ultra-runner/lib/options.js
@@ -8,7 +8,7 @@ const os_1 = tslib_1.__importDefault(require("os"));
 exports.HASH_FILE = ".ultra.cache.json";
 exports.defaults = {
     recursive: false,
-    filter: undefined,
+    filter: [],
     color: chalk_1.default.supportsColor !== undefined,
     pretty: process.stdout.isTTY,
     raw: false,
@@ -57,7 +57,7 @@ exports.RunnerOptionDefs = {
         description: "Set the maximum number of concurrency to 1. Same as --concurrency 1",
     },
     filter: {
-        type: "string",
+        type: "array",
         description: "Filter package name or directory using wildcard pattern. Prefix the filter with '+' to always include dependencies.",
     },
     root: {
@@ -136,6 +136,12 @@ function parse(argv = process.argv) {
             else if (def.type == "string") {
                 // @ts-ignore
                 ret[arg] = argv[++offset];
+            } else if (def.type == "array") {
+                // @ts-ignore
+                if (!ret[arg]) ret[arg] = []
+                // @ts-ignore
+                // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
+                ret[arg].push(argv[++offset])
             }
         }
         else
diff --git a/node_modules/ultra-runner/lib/workspace.js b/node_modules/ultra-runner/lib/workspace.js
index d2c74a9..1dbb9a9 100644
--- a/node_modules/ultra-runner/lib/workspace.js
+++ b/node_modules/ultra-runner/lib/workspace.js
@@ -106,37 +106,45 @@ class Workspace {
             ret.splice(idx, 1);
         return ret;
     }
-    getPackages(filter) {
+    getPackages(filters) {
         let ret = [...this.packages.values()];
-        if (filter) {
-            const withDeps = filter.startsWith("+");
-            let useCwd = false;
-            if (withDeps) {
+        if (filters && filters.length > 0) {
+            const names = new Set();
+     
+            filters.forEach((filter) => {
+              const withDeps = filter.startsWith("+")
+              let useCwd = false
+              if (withDeps) {
                 if (filter === "+" || filter === "+.") {
-                    if (!fs_1.existsSync(path_1.default.resolve(".", "package.json"))) {
-                        throw new Error(`'--filter +' requires a ./package.json file in the current working directory`);
-                    }
-                    useCwd = true;
-                }
-                else {
-                    filter = filter.slice(1);
+                  if (!existsSync(path_1.resolve(".", "package.json"))) {
+                    throw new Error(
+                      `'--filter +' requires a ./package.json file in the current working directory`
+                    )
+                  }
+                  useCwd = true
+                } else {
+                  filter = filter.slice(1)
                 }
             }
             // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
             const regex = globrex_1.default(filter, { filepath: true, extended: true })
                 .regex;
-            const names = new Set();
-            ret.forEach((p) => {
-                if ((useCwd && p.root == process.cwd()) ||
-                    regex.test(p.name || "") ||
-                    regex.test(path_1.default.relative(this.root, p.root).replace(/\\/gu, "/"))) {
-                    names.add(p.name);
-                    if (withDeps)
-                        this.getDepTree(p.name).forEach((dep) => names.add(dep));
-                }
-            });
+            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
+          ret.forEach((p) => {
+            if (
+              (useCwd && p.root == process.cwd()) ||
+              regex.test(p.name || "") ||
+              regex.test(path_1.default.relative(this.root, p.root).replace(/\\/gu, "/"))
+            ) {
+              names.add(p.name)
+              if (withDeps)
+                this.getDepTree(p.name).forEach((dep) => names.add(dep))
+            }
+          })
+        })
             ret = ret.filter((p) => names.has(p.name));
         }
+
         return ret.sort((a, b) => this.order.indexOf(a.name) - this.order.indexOf(b.name));
     }
 }
